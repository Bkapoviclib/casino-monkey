{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Borna\\\\Desktop\\\\TEST GIT\\\\casino-monkey-final\\\\src\\\\components\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport jsonData from \"../data/data.json\";\nimport translate from \"../translation/translate.json\";\nimport { useState, useEffect } from \"react\";\nimport * as Yup from \"yup\";\nimport StepOne from \"./StepOne\";\nimport StepTwo from \"./StepTwo\";\nimport { useForm } from \"react-hook-form\";\nimport i18n from \"../translation/i18n\";\nimport { useTranslation } from \"react-i18next\";\nimport monkey from \"../images/monkey.png\";\nimport { Animated } from \"react-animated-css\";\nimport title from '../images/titletransparent.png';\nimport croatia from '../images/croatia.png';\nimport english from '../images/united-kingdom.png';\nimport Success from \"./Success\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const {\n    t,\n    i18n\n  } = useTranslation(); //initialize react-hook-form variables\n\n  const {\n    register,\n    handleSubmit,\n    watch\n  } = useForm();\n  console.log(watch(\"First Name\")); //set initial state for step\n\n  const [step, setStep] = useState(1); //form state\n\n  const [isloading, setIsLoading] = useState(true);\n  const [formState, setFormState] = useState({});\n\n  const formStateHandler = (oldState, newState) => {\n    let mergedState = { ...oldState,\n      ...newState\n    };\n    setFormState(() => mergedState);\n  }; //\n\n\n  const formatDataForSending = data => {\n    let formattedData = initialValues.map(field => {\n      field.valueStr = data[field[\"code\"]];\n      return field;\n    });\n    return formattedData = [...formattedData];\n  };\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const submitRegistration = fields => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        schema.isValid(fields).then(check => {\n          if (check) {\n            resolve(fields);\n          } else {\n            reject({\n              message: \"Error\"\n            });\n          }\n        });\n      }, 1000);\n    });\n  };\n\n  useEffect(() => {\n    let formattedData = formatDataForSending(formState);\n    console.log(\"formatted data: \", formattedData);\n\n    if (isSubmitting == true) {\n      submitRegistration(formattedData).then(res => {\n        nextStep(step);\n        setIsSubmitting(isSubmitting => !isSubmitting);\n      }).catch(err => console.log(err));\n    }\n  }, [isSubmitting]); //Yup schema for validation\n\n  let objSchema = Yup.object().shape({\n    code: Yup.string().required(),\n    valueStr: Yup.string().required(),\n    dataType: Yup.string().required()\n  });\n  let schema = Yup.array().of(objSchema);\n  let testSchema = [{\n    valueStr: \"testName\",\n    dataType: \"string\"\n  }];\n  /*useEffect(() => {\r\n    if (step == 0) {\r\n      nextStep(step);\r\n    } \r\n    else if (step == 1) {\r\n      nextStep(step)\r\n    }\r\n    else if (step ==2 && isSubmitting){\r\n      nextStep(step)}\r\n    else {\r\n      prevStep(step);\r\n    }\r\n  }, [formState]); */\n\n  schema.isValid(testSchema).then(res => {\n    console.log(res, testSchema);\n  }); //separate json data into 2 steps\n\n  const stepOne = [];\n  const stepTwo = [];\n\n  const stepSeparator = () => {\n    for (let index = 0; index < jsonData.length; index++) {\n      if (index < 3) {\n        stepOne.push(jsonData[index]);\n      } else {\n        stepTwo.push(jsonData[index]);\n      }\n    }\n\n    console.log(\"step one: \", stepOne, \"step two: \", stepTwo);\n  };\n\n  stepSeparator(); //grab names and default values from json data\n\n  let initialValues = [];\n  jsonData.map(element => initialValues.push({\n    code: element[\"code\"],\n    valueStr: \"\",\n    dataType: \"string\"\n  }));\n  console.log(initialValues); //handlers for setting step state\n\n  const nextStep = () => {\n    setStep(step + 1);\n  };\n\n  const prevStep = () => {\n    setStep(step - 1);\n  };\n\n  const resetStep = () => {\n    setStep(1);\n  }; //updating state on step change\n\n\n  const updateState = () => {};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"title-img\",\n          src: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"language-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => i18n.changeLanguage(\"en\"),\n            children: t(\"buttons.englishButton\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => i18n.changeLanguage(\"hr\"),\n            children: t(\"buttons.croatianButton\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"step-container\",\n        children: step == 1 ? /*#__PURE__*/_jsxDEV(StepOne, {\n          step: step,\n          nextStep: nextStep,\n          state: formState,\n          setState: formStateHandler,\n          data: stepOne\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this) : step == 2 ? /*#__PURE__*/_jsxDEV(StepTwo, {\n          setIsSubmitting: setIsSubmitting,\n          step: step,\n          prevStep: prevStep,\n          state: formState,\n          setState: formStateHandler,\n          data: stepTwo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(Success, {\n          step: step,\n          setStep: resetStep\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"oVZnZ4EX7mAHropiK/QArt4oRrs=\", false, function () {\n  return [useTranslation, useForm];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Borna/Desktop/TEST GIT/casino-monkey-final/src/components/App.js"],"names":["React","jsonData","translate","useState","useEffect","Yup","StepOne","StepTwo","useForm","i18n","useTranslation","monkey","Animated","title","croatia","english","Success","App","t","register","handleSubmit","watch","console","log","step","setStep","isloading","setIsLoading","formState","setFormState","formStateHandler","oldState","newState","mergedState","formatDataForSending","data","formattedData","initialValues","map","field","valueStr","isSubmitting","setIsSubmitting","submitRegistration","fields","Promise","resolve","reject","setTimeout","schema","isValid","then","check","message","res","nextStep","catch","err","objSchema","object","shape","code","string","required","dataType","array","of","testSchema","stepOne","stepTwo","stepSeparator","index","length","push","element","prevStep","resetStep","updateState","changeLanguage"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport jsonData from \"../data/data.json\";\r\nimport translate from \"../translation/translate.json\";\r\nimport { useState, useEffect } from \"react\";\r\nimport * as Yup from \"yup\";\r\nimport StepOne from \"./StepOne\";\r\nimport StepTwo from \"./StepTwo\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport i18n from \"../translation/i18n\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport monkey from \"../images/monkey.png\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport title from '../images/titletransparent.png'\r\nimport croatia from '../images/croatia.png'\r\nimport english from '../images/united-kingdom.png'\r\nimport Success from \"./Success\";\r\nfunction App() {\r\n  const { t, i18n } = useTranslation();\r\n  //initialize react-hook-form variables\r\n  const { register, handleSubmit, watch } = useForm();\r\n  console.log(watch(\"First Name\"));\r\n  //set initial state for step\r\n  const [step, setStep] = useState(1);\r\n  //form state\r\n  const [isloading,setIsLoading] = useState(true)\r\n  const [formState, setFormState] = useState({});\r\n  const formStateHandler = (oldState, newState) => {\r\n    let mergedState = { ...oldState, ...newState };\r\n    setFormState(() => mergedState);\r\n  };\r\n  //\r\n  const formatDataForSending = (data) => {\r\n    let formattedData = initialValues.map((field) => {\r\n      field.valueStr = data[field[\"code\"]];\r\n      return field;\r\n    });\r\n    return (formattedData = [...formattedData]);\r\n  };\r\n\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  const submitRegistration = (fields) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        schema.isValid(fields).then((check) => {\r\n          if (check) {\r\n            resolve(fields);\r\n          } else {\r\n            reject({ message: \"Error\" });\r\n          }\r\n        });\r\n      }, 1000);\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    let formattedData = formatDataForSending(formState);\r\n    console.log(\"formatted data: \", formattedData);\r\n    if (isSubmitting == true) {\r\n      submitRegistration(formattedData)\r\n        .then((res) => {\r\n          \r\n          nextStep(step);\r\n          \r\n          setIsSubmitting((isSubmitting) => !isSubmitting);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  }, [isSubmitting]);\r\n  //Yup schema for validation\r\n  let objSchema = Yup.object().shape({\r\n    code: Yup.string().required(),\r\n    valueStr: Yup.string().required(),\r\n    dataType: Yup.string().required(),\r\n  });\r\n  let schema = Yup.array().of(objSchema);\r\n  let testSchema = [{ valueStr: \"testName\", dataType: \"string\" }];\r\n\r\n  /*useEffect(() => {\r\n    if (step == 0) {\r\n      nextStep(step);\r\n    } \r\n    else if (step == 1) {\r\n      nextStep(step)\r\n    }\r\n    else if (step ==2 && isSubmitting){\r\n      nextStep(step)}\r\n    else {\r\n      prevStep(step);\r\n    }\r\n  }, [formState]); */\r\n\r\n  schema.isValid(testSchema).then((res) => {\r\n    console.log(res, testSchema);\r\n  });\r\n\r\n  //separate json data into 2 steps\r\n  const stepOne = [];\r\n  const stepTwo = [];\r\n  const stepSeparator = () => {\r\n    for (let index = 0; index < jsonData.length; index++) {\r\n      if (index < 3) {\r\n        stepOne.push(jsonData[index]);\r\n      } else {\r\n        stepTwo.push(jsonData[index]);\r\n      }\r\n    }\r\n    console.log(\"step one: \", stepOne, \"step two: \", stepTwo);\r\n  };\r\n\r\n  stepSeparator();\r\n  //grab names and default values from json data\r\n  let initialValues = [];\r\n  jsonData.map((element) =>\r\n    initialValues.push({\r\n      code: element[\"code\"],\r\n      valueStr: \"\",\r\n      dataType: \"string\",\r\n    })\r\n  );\r\n  console.log(initialValues);\r\n\r\n  //handlers for setting step state\r\n  const nextStep = () => {\r\n    setStep(step + 1);\r\n  };\r\n  const prevStep = () => {\r\n    setStep(step - 1);\r\n  };\r\n  const resetStep = () =>{\r\n    setStep(1)\r\n  }\r\n  //updating state on step change\r\n  const updateState = () => {};\r\n\r\n  return (\r\n    <div>\r\n    \r\n    <div id=\"app-container\">\r\n    \r\n      <header>\r\n      <img className=\"title-img\" src={title} />\r\n        <div id=\"language-buttons\">\r\n        \r\n          <button onClick={() => i18n.changeLanguage(\"en\")}>\r\n            {t(\"buttons.englishButton\")}\r\n          </button>\r\n          <button onClick={() => i18n.changeLanguage(\"hr\")}>\r\n            {t(\"buttons.croatianButton\")}\r\n          </button>\r\n        </div>\r\n      </header>\r\n      <div id=\"step-container\">\r\n        {step == 1 ? (\r\n          <StepOne\r\n            step={step}\r\n            nextStep={nextStep}\r\n            state={formState}\r\n            setState={formStateHandler}\r\n            data={stepOne}\r\n          />\r\n        ) :step==2 ? (\r\n          <StepTwo\r\n            setIsSubmitting={setIsSubmitting}\r\n            step={step}\r\n            prevStep={prevStep}\r\n            state={formState}\r\n            setState={formStateHandler}\r\n            data={stepTwo}\r\n          />\r\n        ) : (<Success step={step} setStep={resetStep}></Success>)\r\n\r\n        }\r\n      </div>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}