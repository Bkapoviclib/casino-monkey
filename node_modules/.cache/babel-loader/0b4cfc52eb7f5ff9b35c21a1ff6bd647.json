{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Borna\\\\Desktop\\\\TEST GIT\\\\casino-monkey-final\\\\src\\\\components\\\\StepOne.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { ErrorMessage } from \"@hookform/error-message\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\";\nimport { useTranslation } from \"react-i18next\";\nimport Sidebox from \"./Sidebox\";\nimport monkey from \"../images/monkey.png\";\nimport jungle from \"../images/jungleBackground.png\";\nimport loader from \"../images/chiploader.gif\";\nimport jungleFilter from \"../images/jungleBackgroundFilter.png\";\nimport { Animated } from \"react-animated-css\";\nimport { generateYupSchema, generateEmailValidator, generatePasswordValidator, generateStringValidator, flattenObject, workedData, checkValidatorType } from './ValidatorTest'; //First step of the form, takes data from the stepOne array\n// to dynamically generate input elements and labels\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StepOne({\n  data,\n  state,\n  setState,\n  step,\n  nextStep\n}) {\n  _s();\n\n  //initiate translation variables\n  const {\n    t,\n    i18n\n  } = useTranslation();\n  let arrayData = [...data];\n  let workedOnData = workedData(arrayData);\n  let generatedSchema = { ...generateYupSchema(workedOnData)\n  };\n  let schema = Yup.object().shape(generatedSchema).required();\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(schema),\n    shouldFocusError: true,\n    mode: \"onBlur\",\n    reValidateMode: \"onSubmit\"\n  });\n\n  const onSubmit = values => {\n    console.log(\"onSubmit values: \", values);\n    setState(state, values);\n    console.log(state);\n    nextStep(step);\n  };\n\n  const [isLoading, setIsLoading] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"monkey-img\",\n      src: monkey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: loader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 42\n      }, this), \"LOADING...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n      children: data.map(element => /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"input-div\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: t(`labels.${element.code}`)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: t(`labels.${element.code}`),\n          ...register(element.code, {\n            required: \"req\"\n          }),\n          defaultValue: state[element.code]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          as: \"span\",\n          errors: errors,\n          name: element.code\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this)]\n      }, element.code, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 79\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"sidebar-container\",\n      backgroundImage: jungle,\n      children: [/*#__PURE__*/_jsxDEV(Sidebox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"next-button\\r \",\n        type: \"submit\",\n        onClick: e => {\n          setIsLoading(true);\n          setTimeout(() => {\n            setIsLoading(false);\n            handleSubmit(onSubmit)(e.target.value);\n          }, 1000);\n        },\n        children: t(\"buttons.forwardButton\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(StepOne, \"KJlrkmyH1Zh2veWkNh6yG7R1TAk=\", false, function () {\n  return [useTranslation, useForm];\n});\n\n_c = StepOne;\nexport default StepOne;\n\nvar _c;\n\n$RefreshReg$(_c, \"StepOne\");","map":{"version":3,"sources":["C:/Users/Borna/Desktop/TEST GIT/casino-monkey-final/src/components/StepOne.js"],"names":["React","useState","useEffect","useForm","ErrorMessage","yupResolver","Yup","useTranslation","Sidebox","monkey","jungle","loader","jungleFilter","Animated","generateYupSchema","generateEmailValidator","generatePasswordValidator","generateStringValidator","flattenObject","workedData","checkValidatorType","StepOne","data","state","setState","step","nextStep","t","i18n","arrayData","workedOnData","generatedSchema","schema","object","shape","required","register","handleSubmit","formState","errors","resolver","shouldFocusError","mode","reValidateMode","onSubmit","values","console","log","isLoading","setIsLoading","map","element","code","e","setTimeout","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAAQC,iBAAR,EAA0BC,sBAA1B,EAAiDC,yBAAjD,EAA2EC,uBAA3E,EAAmGC,aAAnG,EAAiHC,UAAjH,EAA4HC,kBAA5H,QAAqJ,iBAArJ,C,CAEA;AACA;;;;AACA,SAASC,OAAT,CAAiB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,QAAf;AAAyBC,EAAAA,IAAzB;AAA+BC,EAAAA;AAA/B,CAAjB,EAA4D;AAAA;;AAC1D;AACA,QAAM;AAAEC,IAAAA,CAAF;AAAKC,IAAAA;AAAL,MAAcrB,cAAc,EAAlC;AAEA,MAAIsB,SAAS,GAAG,CAAC,GAAGP,IAAJ,CAAhB;AAEA,MAAIQ,YAAY,GAAGX,UAAU,CAACU,SAAD,CAA7B;AAEA,MAAIE,eAAe,GAAE,EAAC,GAAGjB,iBAAiB,CAACgB,YAAD;AAArB,GAArB;AAEA,MAAIE,MAAM,GAAG1B,GAAG,CAAC2B,MAAJ,GACVC,KADU,CACJH,eADI,EAEVI,QAFU,EAAb;AAIA,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,YAFI;AAIJC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AAJP,MAKFpC,OAAO,CAAC;AAAEqC,IAAAA,QAAQ,EAAEnC,WAAW,CAAC2B,MAAD,CAAvB;AAAgCS,IAAAA,gBAAgB,EAAC,IAAjD;AAAsDC,IAAAA,IAAI,EAAC,QAA3D;AAAqEC,IAAAA,cAAc,EAAC;AAApF,GAAD,CALX;;AAMA,QAAMC,QAAQ,GAAIC,MAAD,IAAY;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,MAAjC;AACArB,IAAAA,QAAQ,CAACD,KAAD,EAAQsB,MAAR,CAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYxB,KAAZ;AACAG,IAAAA,QAAQ,CAACD,IAAD,CAAR;AACD,GALD;;AAOA,QAAM,CAACuB,SAAD,EAAWC,YAAX,IAA2BhD,QAAQ,CAAC,KAAD,CAAzC;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAA4B,MAAA,GAAG,EAAEQ;AAAjC;AAAA;AAAA;AAAA;AAAA,YADF,EAEGuC,SAAS,gBAAC;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BAAwB;AAAM,QAAA,GAAG,EAAErC;AAAX;AAAA;AAAA;AAAA;AAAA,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAD,gBAA8D;AAAA,gBACrEW,IAAI,CAAC4B,GAAL,CAAUC,OAAD,iBACR;AAAK,QAAA,EAAE,EAAC,WAAR;AAAA,gCACE;AAAA,oBAAQxB,CAAC,CAAE,UAASwB,OAAO,CAACC,IAAK,EAAxB;AAAT;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,WAAW,EAAEzB,CAAC,CAAE,UAASwB,OAAO,CAACC,IAAK,EAAxB,CADhB;AAAA,aAEMhB,QAAQ,CAACe,OAAO,CAACC,IAAT,EAAe;AAAEjB,YAAAA,QAAQ,EAAE;AAAZ,WAAf,CAFd;AAGE,UAAA,YAAY,EAAEZ,KAAK,CAAC4B,OAAO,CAACC,IAAT;AAHrB;AAAA;AAAA;AAAA;AAAA,gBAFF,eAQI,QAAC,YAAD;AAAc,UAAA,EAAE,EAAC,MAAjB;AAAwB,UAAA,MAAM,EAAEb,MAAhC;AAAwC,UAAA,IAAI,EAAEY,OAAO,CAACC;AAAtD;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA,SAAyBD,OAAO,CAACC,IAAjC;AAAA;AAAA;AAAA;AAAA,cADD;AADqE;AAAA;AAAA;AAAA;AAAA,YAF1E,eAiBE;AAAK,MAAA,EAAE,EAAC,mBAAR;AAA4B,MAAA,eAAe,EAAE1C,MAA7C;AAAA,8BACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAGE;AACE,QAAA,EAAE,EAAC,gBADL;AAGE,QAAA,IAAI,EAAC,QAHP;AAIE,QAAA,OAAO,EAAG2C,CAAD,IAAO;AACdJ,UAAAA,YAAY,CAAC,IAAD,CAAZ;AACAK,UAAAA,UAAU,CAAC,MAAM;AAACL,YAAAA,YAAY,CAAC,KAAD,CAAZ;AAAoBZ,YAAAA,YAAY,CAACO,QAAD,CAAZ,CAAuBS,CAAC,CAACE,MAAF,CAASC,KAAhC;AAAuC,WAAnE,EAAqE,IAArE,CAAV;AAGD,SATH;AAAA,kBAWG7B,CAAC,CAAC,uBAAD;AAXJ;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqCD;;GAlEQN,O;UAEad,c,EAiBhBJ,O;;;KAnBGkB,O;AAoET,eAAeA,OAAf","sourcesContent":["import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { ErrorMessage } from \"@hookform/error-message\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport Sidebox from \"./Sidebox\";\r\nimport monkey from \"../images/monkey.png\";\r\nimport jungle from \"../images/jungleBackground.png\";\r\nimport loader from \"../images/chiploader.gif\"\r\nimport jungleFilter from \"../images/jungleBackgroundFilter.png\";\r\nimport { Animated } from \"react-animated-css\";\r\nimport {generateYupSchema,generateEmailValidator,generatePasswordValidator,generateStringValidator,flattenObject,workedData,checkValidatorType} from './ValidatorTest'\r\n\r\n//First step of the form, takes data from the stepOne array\r\n// to dynamically generate input elements and labels\r\nfunction StepOne({ data, state, setState, step, nextStep }) {\r\n  //initiate translation variables\r\n  const { t, i18n } = useTranslation();\r\n\r\n  let arrayData = [...data]\r\n \r\n  let workedOnData = workedData(arrayData)\r\n\r\n  let generatedSchema ={...generateYupSchema(workedOnData)}\r\n\r\n  let schema = Yup.object()\r\n    .shape(generatedSchema)\r\n    .required();\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    \r\n    formState: { errors },\r\n  } = useForm({ resolver: yupResolver(schema),shouldFocusError:true,mode:\"onBlur\", reValidateMode:\"onSubmit\"});\r\n  const onSubmit = (values) => {\r\n    console.log(\"onSubmit values: \", values);\r\n    setState(state, values);\r\n    console.log(state);\r\n    nextStep(step)\r\n  };\r\n\r\n  const [isLoading,setIsLoading] = useState(false)\r\n  \r\n  return (\r\n    <div className=\"form-wrapper\">\r\n      <img className=\"monkey-img\" src={monkey} />\r\n      {isLoading?<div className=\"loader\"><img  src={loader}/>LOADING...</div>:<form>\r\n        {data.map((element) => (\r\n          <div id=\"input-div\" key={element.code}>\r\n            <label>{t(`labels.${element.code}`)}</label>\r\n            <input \r\n              placeholder={t(`labels.${element.code}`)}\r\n              {...register(element.code, { required: \"req\" })}\r\n              defaultValue={state[element.code]}\r\n            />\r\n           \r\n              <ErrorMessage as=\"span\" errors={errors} name={element.code} />\r\n            \r\n          </div>\r\n        ))}\r\n      </form>}\r\n      <div id=\"sidebar-container\" backgroundImage={jungle}>\r\n        <Sidebox />\r\n\r\n        <button\r\n          id=\"next-button\r\n          \"\r\n          type=\"submit\"\r\n          onClick={(e) => {\r\n            setIsLoading(true)\r\n            setTimeout(() => {setIsLoading(false);handleSubmit(onSubmit)(e.target.value)}, 1000);\r\n            \r\n            \r\n          }}\r\n        >\r\n          {t(\"buttons.forwardButton\")}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StepOne;\r\n"]},"metadata":{},"sourceType":"module"}