{"ast":null,"code":"import { yupResolver } from \"@hookform/resolvers/yup\";\nimport React from \"react\";\nimport data from \"../data/data.json\";\nimport defaultValidators from \"../data/default_validators.json\";\nimport * as Yup from \"yup\";\nimport i18next from \"i18next\";\nexport const flattenObject = obj => {\n  const flattened = {};\n  Object.keys(obj).forEach(key => {\n    if (typeof obj[key] === \"object\" && obj[key] !== null) {\n      Object.assign(flattened, flattenObject(obj[key]));\n    } else {\n      flattened[key] = obj[key];\n    }\n  });\n  return flattened;\n};\nconst default_validators = defaultValidators;\nconst stepOne = [];\nconst stepTwo = [];\n\nconst stepSeparator = () => {\n  for (let index = 0; index < data.length; index++) {\n    if (index < 3) {\n      stepOne.push(data[index]);\n    } else {\n      stepTwo.push(data[index]);\n    }\n  }\n\n  console.log(\"step one: \", stepOne, \"step two: \", stepTwo);\n};\n\nstepSeparator();\nlet stepOneData = stepOne;\nlet stepTwoData = stepTwo;\n\nconst mergeValidators = element => {};\n\nlet arrayData = [...stepOneData];\nexport const workedData = arrayData => {\n  let res = {};\n  res = arrayData.map(element => {\n    var _element$validators;\n\n    console.log(\"initial element being worked: \", element);\n    let value = element === null || element === void 0 ? void 0 : (_element$validators = element.validators) === null || _element$validators === void 0 ? void 0 : _element$validators.map(validator => ({\n      [validator.key]: Object.values(validator === null || validator === void 0 ? void 0 : validator.parameters)[0]\n    }));\n    console.log(\"preSPREAD value: \", value);\n    value = { ...value\n    };\n    console.log(\"preFLAT value: \", value);\n    value = flattenObject(value);\n    console.log(\"code: \", element.code, \"value: \", value);\n    return {\n      [element.code]: value\n    };\n  });\n  return res;\n};\nexport const generatePasswordValidator = element => {\n  var _element$name, _element$name2;\n\n  let name = Object.keys(element)[0];\n  let validator = {\n    passwordStrength: ((_element$name = element[name]) === null || _element$name === void 0 ? void 0 : _element$name.passwordStrength) || default_validators.password.passwordStrength,\n    passwordMustMatch: ((_element$name2 = element[name]) === null || _element$name2 === void 0 ? void 0 : _element$name2.passwordMustMatch) || default_validators.password.passwordMustMatch\n  };\n  let result = {\n    [Object.keys(element)[0]]: Yup.string().required(i18next.t(`errors.${name}.required`)).matches(validator.passwordStrength, i18next.t(`errors.password.passwordStrength`)).oneOf([Yup.ref(\"password\"), null], i18next.t(`errors.password.passwordMatch`))\n  };\n  console.log(result);\n  return result;\n};\nexport const generateEmailValidator = element => {\n  var _element$name3;\n\n  let name = Object.keys(element)[0];\n  let validator = {\n    email: ((_element$name3 = element[name]) === null || _element$name3 === void 0 ? void 0 : _element$name3.emailValidator) || default_validators.emailValidator.email\n  };\n  let result = {\n    [Object.keys(element)[0]]: Yup.string().required(i18next.t(`errors.${name}.required`)).matches(validator.email, i18next.t(\"errors.email.email\"))\n  };\n  console.log(result);\n  return result;\n};\nexport const generateStringValidator = element => {\n  var _element$name4, _element$name5, _element$name6;\n\n  console.log(\"INSIDE STRING VALIDATOR\");\n  let name = Object.keys(element)[0];\n  let validator = {\n    min: ((_element$name4 = element[name]) === null || _element$name4 === void 0 ? void 0 : _element$name4.minLength) || default_validators.string.length.min,\n    max: ((_element$name5 = element[name]) === null || _element$name5 === void 0 ? void 0 : _element$name5.maxLength) || default_validators.string.length.max,\n    lettersOnly: ((_element$name6 = element[name]) === null || _element$name6 === void 0 ? void 0 : _element$name6.lettersOnlyValidator) || default_validators.string.lettersOnly\n  };\n  let result = {\n    [Object.keys(element)[0]]: Yup.string().required(i18next.t(`errors.${name}.required`)).min(`${validator.min}`, i18next.t(`errors.${name}.minLength`)).max(`${validator.max}`, i18next.t(`errors.${name}.maxLength`)).matches(validator.lettersOnly, i18next.t(\"errors.fname.letters_only\"))\n  };\n  console.log(result);\n  return result;\n};\nexport const checkValidatorType = element => {\n  if (Object.keys(element).filter(key => key.startsWith(\"email\")).length) {\n    console.log(\"WENT INTO EMAIL\");\n    return generateEmailValidator(element);\n  } else if (Object.keys(element).filter(key => key.startsWith(\"password\")).length) {\n    return generatePasswordValidator(element);\n  } else {\n    console.log(\"ELSE TRIGGERED\");\n    return generateStringValidator(element);\n  }\n};\nlet a = [{\n  fname: {\n    minLength: {\n      targetLength: 2\n    }\n  }\n}, {\n  fname: {\n    maxLength: {\n      targetLength: 25\n    }\n  }\n}];\nexport const generateYupSchema = data => {\n  let res = {};\n  let arr = data.map(element => {\n    console.log(\"ELEMENT BEFORE PASSING TO CHECK: \", JSON.stringify(element));\n    return checkValidatorType(element);\n  });\n  arr.forEach(element => res = { ...res,\n    ...element\n  });\n  return res;\n};","map":{"version":3,"sources":["C:/Users/Borna/Desktop/TEST GIT/casino-monkey-final/src/components/ValidatorTest.js"],"names":["yupResolver","React","data","defaultValidators","Yup","i18next","flattenObject","obj","flattened","Object","keys","forEach","key","assign","default_validators","stepOne","stepTwo","stepSeparator","index","length","push","console","log","stepOneData","stepTwoData","mergeValidators","element","arrayData","workedData","res","map","value","validators","validator","values","parameters","code","generatePasswordValidator","name","passwordStrength","password","passwordMustMatch","result","string","required","t","matches","oneOf","ref","generateEmailValidator","email","emailValidator","generateStringValidator","min","minLength","max","maxLength","lettersOnly","lettersOnlyValidator","checkValidatorType","filter","startsWith","a","fname","targetLength","generateYupSchema","arr","JSON","stringify"],"mappings":"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","sourcesContent":["import { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport React from \"react\";\r\nimport data from \"../data/data.json\";\r\nimport defaultValidators from \"../data/default_validators.json\";\r\nimport * as Yup from \"yup\";\r\nimport i18next from \"i18next\";\r\n\r\nexport const flattenObject = (obj) => {\r\n  const flattened = {};\r\n\r\n  Object.keys(obj).forEach((key) => {\r\n    if (typeof obj[key] === \"object\" && obj[key] !== null) {\r\n      Object.assign(flattened, flattenObject(obj[key]));\r\n    } else {\r\n      flattened[key] = obj[key];\r\n    }\r\n  });\r\n\r\n  return flattened;\r\n};\r\nconst default_validators = defaultValidators;\r\nconst stepOne = [];\r\nconst stepTwo = [];\r\nconst stepSeparator = () => {\r\n  for (let index = 0; index < data.length; index++) {\r\n    if (index < 3) {\r\n      stepOne.push(data[index]);\r\n    } else {\r\n      stepTwo.push(data[index]);\r\n    }\r\n  }\r\n  console.log(\"step one: \", stepOne, \"step two: \", stepTwo);\r\n};\r\nstepSeparator();\r\nlet stepOneData = stepOne;\r\nlet stepTwoData = stepTwo;\r\n\r\nconst mergeValidators = (element) => {};\r\n\r\n\r\n  let arrayData = [...stepOneData];\r\nexport const workedData =(arrayData)=>{\r\n  let res = {}\r\n  res = arrayData.map((element) => {\r\n  console.log(\"initial element being worked: \", element)\r\n    let value = element?.validators?.map((validator) => ({\r\n      [validator.key]: Object.values(validator?.parameters)[0],\r\n    }));\r\n    console.log(\"preSPREAD value: \",value)\r\n    value = { ...value };\r\n    console.log(\"preFLAT value: \" , value)\r\n    value = flattenObject(value);\r\n\r\n    console.log(\"code: \",element.code,\"value: \",value)\r\n    return {\r\n      [element.code]: value,\r\n    };\r\n  })\r\nreturn res;\r\n};\r\n\r\n   export const generatePasswordValidator = (element) => {\r\n    let name = Object.keys(element)[0];\r\n    let validator = {\r\n      passwordStrength: element[name]?.passwordStrength || default_validators.password.passwordStrength,\r\n      passwordMustMatch: element[name]?.passwordMustMatch|| default_validators.password.passwordMustMatch\r\n    };\r\n    let result = {\r\n      [Object.keys(\r\n        element\r\n      )[0]]: Yup.string().required(i18next.t(`errors.${name}.required`)).matches(validator.passwordStrength,i18next.t(`errors.password.passwordStrength`)).oneOf([Yup.ref(\"password\"),null],i18next.t(`errors.password.passwordMatch`))\r\n    };\r\n    console.log(result);\r\n    return result;\r\n   };\r\n  export const generateEmailValidator = (element) => {\r\n    let name = Object.keys(element)[0];\r\n    let validator = {\r\n      email: element[name]?.emailValidator || default_validators.emailValidator.email,\r\n    };\r\n    let result = {\r\n      [Object.keys(\r\n        element\r\n      )[0]]: Yup.string().required(i18next.t(`errors.${name}.required`)).matches(validator.email,i18next.t(\"errors.email.email\"))\r\n    };\r\n    console.log(result);\r\n    return result;\r\n  };\r\n\r\n  export const generateStringValidator = (element) => {\r\n    console.log(\"INSIDE STRING VALIDATOR\");\r\n    let name = Object.keys(element)[0];\r\n    let validator = {\r\n      min: element[name]?.minLength || default_validators.string.length.min,\r\n      max: element[name]?.maxLength || default_validators.string.length.max,\r\n      lettersOnly: element[name]?.lettersOnlyValidator || default_validators.string.lettersOnly\r\n    };\r\n    let result = {\r\n      [Object.keys(\r\n        element\r\n      )[0]]: Yup.string().required(i18next.t(`errors.${name}.required`)).min(`${validator.min}`,i18next.t(`errors.${name}.minLength`)).max(`${validator.max}`, i18next.t(`errors.${name}.maxLength`)).matches(validator.lettersOnly,i18next.t(\"errors.fname.letters_only\"))\r\n    };\r\n    console.log(result);\r\n    return result;\r\n  };\r\n\r\n  export const checkValidatorType = (element) => {\r\n    if (Object.keys(element).filter((key) => key.startsWith(\"email\")).length) {\r\n      console.log(\"WENT INTO EMAIL\");\r\n      return generateEmailValidator(element);\r\n    } else if (\r\n      Object.keys(element).filter((key) => key.startsWith(\"password\")).length\r\n    ) {\r\n      return generatePasswordValidator(element);\r\n    } else {\r\n      console.log(\"ELSE TRIGGERED\");\r\n      return generateStringValidator(element);\r\n    }\r\n  };\r\n\r\n  let a = [\r\n    { fname: { minLength: { targetLength: 2 } } },\r\n    { fname: { maxLength: { targetLength: 25 } } },\r\n  ];\r\n\r\n  export const generateYupSchema = (data) => {\r\n    let res = {};\r\n    let arr = data.map((element) => {\r\n      console.log(\"ELEMENT BEFORE PASSING TO CHECK: \", JSON.stringify(element));\r\n      return checkValidatorType(element);\r\n    });\r\n    arr.forEach((element) => (res = { ...res, ...element }));\r\n    return res;\r\n  };\r\n\r\n\r\n\r\n \r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}