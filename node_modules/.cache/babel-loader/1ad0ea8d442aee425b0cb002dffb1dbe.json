{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Borna\\\\Desktop\\\\TEST GIT\\\\casino-monkey-final\\\\src\\\\components\\\\StepOne.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { ErrorMessage } from \"@hookform/error-message\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\";\nimport { useTranslation } from \"react-i18next\";\nimport Sidebox from \"./Sidebox\";\nimport monkey from \"../images/monkey.png\";\nimport jungle from \"../images/jungleBackground.png\";\nimport loader from \"../images/chiploader.gif\";\nimport { generateYupSchema, workedData } from \"./ValidatorTest\"; //First step of the form, takes data from the stepOne array\n// to dynamically generate input elements and labels\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StepOne({\n  data,\n  state,\n  setState,\n  step,\n  nextStep\n}) {\n  _s();\n\n  //initiate translation variables\n  const {\n    t\n  } = useTranslation();\n  let arrayData = [...data];\n  let workedOnData = workedData(arrayData);\n  let generatedSchema = { ...generateYupSchema(workedOnData)\n  };\n  let schema = Yup.object().shape(generatedSchema).required();\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(schema),\n    shouldFocusError: true,\n    mode: \"onBlur\",\n    reValidateMode: \"onSubmit\"\n  });\n\n  const onSubmit = values => {\n    console.log(\"onSubmit values: \", values);\n    setState(state, values);\n    console.log(state);\n    nextStep(step);\n  };\n\n  const [isLoading, setIsLoading] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"monkey-img\",\n      alt: \"Monkey hanging to the side of the form window\",\n      src: monkey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"Loading chip\",\n        src: loader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), \"LOADING...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n      children: data.map(element => /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"input-div\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: t(`labels.${element.code}`)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: t(`labels.${element.code}`),\n          ...register(element.code, {\n            required: \"req\"\n          }),\n          defaultValue: state[element.code]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          as: \"span\",\n          errors: errors,\n          name: element.code\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this)]\n      }, element.code, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"sidebar-container\",\n      backgroundImage: jungle,\n      children: [/*#__PURE__*/_jsxDEV(Sidebox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"next-button\\r \",\n        type: \"submit\",\n        onClick: e => {\n          setIsLoading(true);\n          setTimeout(() => {\n            setIsLoading(false);\n            handleSubmit(onSubmit)(e.target.value);\n          }, 1000);\n        },\n        children: t(\"buttons.forwardButton\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(StepOne, \"FcAMlHCtBhUb2qzQdkG3bvXIdHg=\", false, function () {\n  return [useTranslation, useForm];\n});\n\n_c = StepOne;\nexport default StepOne;\n\nvar _c;\n\n$RefreshReg$(_c, \"StepOne\");","map":{"version":3,"sources":["C:/Users/Borna/Desktop/TEST GIT/casino-monkey-final/src/components/StepOne.js"],"names":["React","useState","useForm","ErrorMessage","yupResolver","Yup","useTranslation","Sidebox","monkey","jungle","loader","generateYupSchema","workedData","StepOne","data","state","setState","step","nextStep","t","arrayData","workedOnData","generatedSchema","schema","object","shape","required","register","handleSubmit","formState","errors","resolver","shouldFocusError","mode","reValidateMode","onSubmit","values","console","log","isLoading","setIsLoading","map","element","code","e","setTimeout","target","value"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { ErrorMessage } from \"@hookform/error-message\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport Sidebox from \"./Sidebox\";\r\nimport monkey from \"../images/monkey.png\";\r\nimport jungle from \"../images/jungleBackground.png\";\r\nimport loader from \"../images/chiploader.gif\";\r\nimport { generateYupSchema, workedData } from \"./ValidatorTest\";\r\n\r\n//First step of the form, takes data from the stepOne array\r\n// to dynamically generate input elements and labels\r\nfunction StepOne({ data, state, setState, step, nextStep }) {\r\n  //initiate translation variables\r\n  const { t } = useTranslation();\r\n\r\n  let arrayData = [...data];\r\n\r\n  let workedOnData = workedData(arrayData);\r\n\r\n  let generatedSchema = { ...generateYupSchema(workedOnData) };\r\n\r\n  let schema = Yup.object().shape(generatedSchema).required();\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n    shouldFocusError: true,\r\n    mode: \"onBlur\",\r\n    reValidateMode: \"onSubmit\",\r\n  });\r\n  const onSubmit = (values) => {\r\n    console.log(\"onSubmit values: \", values);\r\n    setState(state, values);\r\n    console.log(state);\r\n    nextStep(step);\r\n  };\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  return (\r\n    <div className=\"form-wrapper\">\r\n      <img\r\n        className=\"monkey-img\"\r\n        alt=\"Monkey hanging to the side of the form window\"\r\n        src={monkey}\r\n      />\r\n      {isLoading ? (\r\n        <div className=\"loader\">\r\n          <img alt=\"Loading chip\" src={loader} />\r\n          LOADING...\r\n        </div>\r\n      ) : (\r\n        <form>\r\n          {data.map((element) => (\r\n            <div id=\"input-div\" key={element.code}>\r\n              <label>{t(`labels.${element.code}`)}</label>\r\n              <input\r\n                placeholder={t(`labels.${element.code}`)}\r\n                {...register(element.code, { required: \"req\" })}\r\n                defaultValue={state[element.code]}\r\n              />\r\n\r\n              <ErrorMessage as=\"span\" errors={errors} name={element.code} />\r\n            </div>\r\n          ))}\r\n        </form>\r\n      )}\r\n      <div id=\"sidebar-container\" backgroundImage={jungle}>\r\n        <Sidebox />\r\n\r\n        <button\r\n          id=\"next-button\r\n          \"\r\n          type=\"submit\"\r\n          onClick={(e) => {\r\n            setIsLoading(true);\r\n            setTimeout(() => {\r\n              setIsLoading(false);\r\n              handleSubmit(onSubmit)(e.target.value);\r\n            }, 1000);\r\n          }}\r\n        >\r\n          {t(\"buttons.forwardButton\")}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StepOne;\r\n"]},"metadata":{},"sourceType":"module"}