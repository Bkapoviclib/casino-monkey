{"ast":null,"code":"import defaultValidators from \"../data/defaultValidators.json\";\nimport * as Yup from \"yup\";\nimport i18next from \"i18next\";\nexport const flattenObject = obj => {\n  const flattened = {};\n  Object.keys(obj).forEach(key => {\n    if (typeof obj[key] === \"object\" && obj[key] !== null) {\n      Object.assign(flattened, flattenObject(obj[key]));\n    } else {\n      flattened[key] = obj[key];\n    }\n  });\n  return flattened;\n};\nexport const workedData = arrayData => {\n  let res = {};\n  res = arrayData.map(element => {\n    var _element$validators;\n\n    console.log(\"initial element being worked: \", element);\n    let value = element === null || element === void 0 ? void 0 : (_element$validators = element.validators) === null || _element$validators === void 0 ? void 0 : _element$validators.map(validator => ({\n      [validator.key]: Object.values(validator === null || validator === void 0 ? void 0 : validator.parameters)[0]\n    }));\n    console.log(\"preSPREAD value: \", value);\n    value = { ...value\n    };\n    console.log(\"preFLAT value: \", value);\n    value = flattenObject(value);\n    console.log(\"code: \", element.code, \"value: \", value);\n    return {\n      [element.code]: value\n    };\n  });\n  return res;\n};\nexport const generatePasswordValidator = element => {\n  var _element$name, _element$name2;\n\n  let name = Object.keys(element)[0];\n  let validator = {\n    passwordStrength: ((_element$name = element[name]) === null || _element$name === void 0 ? void 0 : _element$name.passwordStrength) || defaultValidators.password.passwordStrength,\n    passwordMustMatch: ((_element$name2 = element[name]) === null || _element$name2 === void 0 ? void 0 : _element$name2.passwordMustMatch) || defaultValidators.password.passwordMustMatch\n  };\n  let result = {\n    [Object.keys(element)[0]]: Yup.string().required(i18next.t(`errors.${name}.required`)).matches(validator.passwordStrength, i18next.t(`errors.password.passwordStrength`)).oneOf([Yup.ref(\"password\"), null], i18next.t(`errors.password.passwordMatch`))\n  };\n  console.log(result);\n  return result;\n};\nexport const generateEmailValidator = element => {\n  var _element$name3;\n\n  let name = Object.keys(element)[0];\n  let validator = {\n    email: ((_element$name3 = element[name]) === null || _element$name3 === void 0 ? void 0 : _element$name3.emailValidator) || defaultValidators.emailValidator.email\n  };\n  let result = {\n    [Object.keys(element)[0]]: Yup.string().required(i18next.t(`errors.${name}.required`)).matches(validator.email, i18next.t(\"errors.email.email\"))\n  };\n  console.log(result);\n  return result;\n};\nexport const generateStringValidator = element => {\n  var _element$name4, _element$name5, _element$name6;\n\n  console.log(\"INSIDE STRING VALIDATOR\");\n  let name = Object.keys(element)[0];\n  let validator = {\n    min: ((_element$name4 = element[name]) === null || _element$name4 === void 0 ? void 0 : _element$name4.minLength) || defaultValidators.string.length.min,\n    max: ((_element$name5 = element[name]) === null || _element$name5 === void 0 ? void 0 : _element$name5.maxLength) || defaultValidators.string.length.max,\n    lettersOnly: ((_element$name6 = element[name]) === null || _element$name6 === void 0 ? void 0 : _element$name6.lettersOnlyValidator) || defaultValidators.string.lettersOnly\n  };\n  let result = {\n    [Object.keys(element)[0]]: Yup.string().required(i18next.t(`errors.${name}.required`)).min(`${validator.min}`, i18next.t(`errors.${name}.minLength`)).max(`${validator.max}`, i18next.t(`errors.${name}.maxLength`)).matches(validator.lettersOnly, i18next.t(\"errors.fname.letters_only\"))\n  };\n  console.log(result);\n  return result;\n};\nexport const checkValidatorType = element => {\n  if (Object.keys(element).filter(key => key.startsWith(\"email\")).length) {\n    console.log(\"WENT INTO EMAIL\");\n    return generateEmailValidator(element);\n  } else if (Object.keys(element).filter(key => key.startsWith(\"password\")).length) {\n    return generatePasswordValidator(element);\n  } else {\n    console.log(\"ELSE TRIGGERED\");\n    return generateStringValidator(element);\n  }\n};\nexport const generateYupSchema = data => {\n  let res = {};\n  let arr = data.map(element => {\n    console.log(\"ELEMENT BEFORE PASSING TO CHECK: \", JSON.stringify(element));\n    return checkValidatorType(element);\n  });\n  arr.forEach(element => res = { ...res,\n    ...element\n  });\n  return res;\n};","map":{"version":3,"sources":["C:/Users/Borna/Desktop/TEST GIT/casino-monkey-final/src/components/ValidatorTest.js"],"names":["defaultValidators","Yup","i18next","flattenObject","obj","flattened","Object","keys","forEach","key","assign","workedData","arrayData","res","map","element","console","log","value","validators","validator","values","parameters","code","generatePasswordValidator","name","passwordStrength","password","passwordMustMatch","result","string","required","t","matches","oneOf","ref","generateEmailValidator","email","emailValidator","generateStringValidator","min","minLength","length","max","maxLength","lettersOnly","lettersOnlyValidator","checkValidatorType","filter","startsWith","generateYupSchema","data","arr","JSON","stringify"],"mappings":"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","sourcesContent":["import defaultValidators from \"../data/defaultValidators.json\";\r\nimport * as Yup from \"yup\";\r\nimport i18next from \"i18next\";\r\n\r\nexport const flattenObject = (obj) => {\r\n  const flattened = {};\r\n  Object.keys(obj).forEach((key) => {\r\n    if (typeof obj[key] === \"object\" && obj[key] !== null) {\r\n      Object.assign(flattened, flattenObject(obj[key]));\r\n    } else {\r\n      flattened[key] = obj[key];\r\n    }\r\n  });\r\n\r\n  return flattened;\r\n};\r\n\r\nexport const workedData = (arrayData) => {\r\n  let res = {};\r\n  res = arrayData.map((element) => {\r\n    console.log(\"initial element being worked: \", element);\r\n    let value = element?.validators?.map((validator) => ({\r\n      [validator.key]: Object.values(validator?.parameters)[0],\r\n    }));\r\n    console.log(\"preSPREAD value: \", value);\r\n    value = { ...value };\r\n    console.log(\"preFLAT value: \", value);\r\n    value = flattenObject(value);\r\n\r\n    console.log(\"code: \", element.code, \"value: \", value);\r\n    return {\r\n      [element.code]: value,\r\n    };\r\n  });\r\n  return res;\r\n};\r\n\r\nexport const generatePasswordValidator = (element) => {\r\n  let name = Object.keys(element)[0];\r\n  let validator = {\r\n    passwordStrength:\r\n      element[name]?.passwordStrength ||\r\n      defaultValidators.password.passwordStrength,\r\n    passwordMustMatch:\r\n      element[name]?.passwordMustMatch ||\r\n      defaultValidators.password.passwordMustMatch,\r\n  };\r\n  let result = {\r\n    [Object.keys(element)[0]]: Yup.string()\r\n      .required(i18next.t(`errors.${name}.required`))\r\n      .matches(\r\n        validator.passwordStrength,\r\n        i18next.t(`errors.password.passwordStrength`)\r\n      )\r\n      .oneOf(\r\n        [Yup.ref(\"password\"), null],\r\n        i18next.t(`errors.password.passwordMatch`)\r\n      ),\r\n  };\r\n  console.log(result);\r\n  return result;\r\n};\r\nexport const generateEmailValidator = (element) => {\r\n  let name = Object.keys(element)[0];\r\n  let validator = {\r\n    email:\r\n      element[name]?.emailValidator || defaultValidators.emailValidator.email,\r\n  };\r\n  let result = {\r\n    [Object.keys(element)[0]]: Yup.string()\r\n      .required(i18next.t(`errors.${name}.required`))\r\n      .matches(validator.email, i18next.t(\"errors.email.email\")),\r\n  };\r\n  console.log(result);\r\n  return result;\r\n};\r\n\r\nexport const generateStringValidator = (element) => {\r\n  console.log(\"INSIDE STRING VALIDATOR\");\r\n  let name = Object.keys(element)[0];\r\n  let validator = {\r\n    min: element[name]?.minLength || defaultValidators.string.length.min,\r\n    max: element[name]?.maxLength || defaultValidators.string.length.max,\r\n    lettersOnly:\r\n      element[name]?.lettersOnlyValidator ||\r\n      defaultValidators.string.lettersOnly,\r\n  };\r\n  let result = {\r\n    [Object.keys(element)[0]]: Yup.string()\r\n      .required(i18next.t(`errors.${name}.required`))\r\n      .min(`${validator.min}`, i18next.t(`errors.${name}.minLength`))\r\n      .max(`${validator.max}`, i18next.t(`errors.${name}.maxLength`))\r\n      .matches(validator.lettersOnly, i18next.t(\"errors.fname.letters_only\")),\r\n  };\r\n  console.log(result);\r\n  return result;\r\n};\r\n\r\nexport const checkValidatorType = (element) => {\r\n  if (Object.keys(element).filter((key) => key.startsWith(\"email\")).length) {\r\n    console.log(\"WENT INTO EMAIL\");\r\n    return generateEmailValidator(element);\r\n  } else if (\r\n    Object.keys(element).filter((key) => key.startsWith(\"password\")).length\r\n  ) {\r\n    return generatePasswordValidator(element);\r\n  } else {\r\n    console.log(\"ELSE TRIGGERED\");\r\n    return generateStringValidator(element);\r\n  }\r\n};\r\n\r\nexport const generateYupSchema = (data) => {\r\n  let res = {};\r\n  let arr = data.map((element) => {\r\n    console.log(\"ELEMENT BEFORE PASSING TO CHECK: \", JSON.stringify(element));\r\n    return checkValidatorType(element);\r\n  });\r\n  arr.forEach((element) => (res = { ...res, ...element }));\r\n  return res;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}